====================================================== test session starts =======================================================
platform linux -- Python 3.7.0, pytest-4.0.0, py-1.7.0, pluggy-0.8.0
rootdir: /home/rafael/Documents/CEPESP/teste.cepespdata, inifile:
plugins: remotedata-0.3.1, openfiles-0.3.0, doctestplus-0.1.3, arraydiff-0.2
collected 16 items

test.py F.FFFF.FFF..FFFF                                                                                                   [100%]

============================================================ FAILURES ============================================================
___________________________________________________ test_cepespdata[2006-1-6] ____________________________________________________

ano = 2006, cargo = 1, agregacao_regional = 6

    @pytest.mark.parametrize('ano, cargo, agregacao_regional',
                             [(a,b,c) for a in range(2006,2022,4) for b in [1,3,5,6] for c in [6]])
    
    def test_cepespdata(ano, cargo, agregacao_regional):
        inst = teste_cepespdata(ano, cargo, agregacao_regional = agregacao_regional, test = False)
        inst.call_teste_geral()
    
        #o assert é usado para fazer o teste de fato. Se der false, ele já coloca no log
        #o log para sempre no primeiro erro
    
        #######################################################
        # 1. Número de Eleitos
        assert inst.qtde_eleitos == inst.qtde_vagas_disponiveis
    
        #######################################################
        # 2. Quantidade de UF
        # Fonte: Detalhe seção do TSE
    
        if agregacao_regional >= 2:
            assert inst.qtde_ufs == 27
    
        #######################################################
        # 3. Quantidade total de votos frente ao comparecimento com 1% de tolerância
        # Fonte: Detalhe seção do TSE
        assert math.isclose(inst.qtde_votos_total_1turno, inst.qtde_comparecimento_1turno, rel_tol=0.01)
        assert math.isclose(inst.qtde_votos_total_2turno, inst.qtde_comparecimento_2turno, rel_tol=0.01)
    
        #######################################################
        # 4. Quantidade de municípios
        # Fonte: Detalhe seção do TSE
        if agregacao_regional >= 6:
>           assert inst.qtde_cidades_tse  == inst.qtde_cidades_esperadas
E           assert 5565 == 5642
E            +  where 5565 = <teste_cepespdata.teste_cepespdata object at 0x7fc050bae320>.qtde_cidades_tse
E            +  and   5642 = <teste_cepespdata.teste_cepespdata object at 0x7fc050bae320>.qtde_cidades_esperadas

test.py:37: AssertionError
------------------------------------------------------ Captured stdout call ------------------------------------------------------
Ano: 2006
Cargo: 1 
Banco Teste: False

Starting test...
Downloading Eleições - BETA...
Downloading Candidatos...
___________________________________________________ test_cepespdata[2006-5-6] ____________________________________________________

ano = 2006, cargo = 5, agregacao_regional = 6

    @pytest.mark.parametrize('ano, cargo, agregacao_regional',
                             [(a,b,c) for a in range(2006,2022,4) for b in [1,3,5,6] for c in [6]])
    
    def test_cepespdata(ano, cargo, agregacao_regional):
        inst = teste_cepespdata(ano, cargo, agregacao_regional = agregacao_regional, test = False)
>       inst.call_teste_geral()

test.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
teste_cepespdata.py:221: in call_teste_geral
    self.download_eleicoes()
teste_cepespdata.py:68: in download_eleicoes
    'cpf_candidato': str})
../../../anaconda3/lib/python3.7/site-packages/pandas/io/parsers.py:678: in parser_f
    return _read(filepath_or_buffer, kwds)
../../../anaconda3/lib/python3.7/site-packages/pandas/io/parsers.py:424: in _read
    filepath_or_buffer, encoding, compression)
../../../anaconda3/lib/python3.7/site-packages/pandas/io/common.py:195: in get_filepath_or_buffer
    req = _urlopen(filepath_or_buffer)
../../../anaconda3/lib/python3.7/urllib/request.py:222: in urlopen
    return opener.open(url, data, timeout)
../../../anaconda3/lib/python3.7/urllib/request.py:531: in open
    response = meth(req, response)
../../../anaconda3/lib/python3.7/urllib/request.py:641: in http_response
    'http', request, response, code, msg, hdrs)
../../../anaconda3/lib/python3.7/urllib/request.py:569: in error
    return self._call_chain(*args)
../../../anaconda3/lib/python3.7/urllib/request.py:503: in _call_chain
    result = func(*args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <urllib.request.HTTPDefaultErrorHandler object at 0x7fc050bae6a0>, req = <urllib.request.Request object at 0x7fc05029af60>
fp = <http.client.HTTPResponse object at 0x7fc05029a1d0>, code = 504, msg = 'GATEWAY_TIMEOUT'
hdrs = <http.client.HTTPMessage object at 0x7fc05029a2e8>

    def http_error_default(self, req, fp, code, msg, hdrs):
>       raise HTTPError(req.full_url, code, msg, hdrs, fp)
E       urllib.error.HTTPError: HTTP Error 504: GATEWAY_TIMEOUT

../../../anaconda3/lib/python3.7/urllib/request.py:649: HTTPError
------------------------------------------------------ Captured stdout call ------------------------------------------------------
Ano: 2006
Cargo: 5 
Banco Teste: False

Starting test...
Downloading Eleições - BETA...
___________________________________________________ test_cepespdata[2006-6-6] ____________________________________________________

ano = 2006, cargo = 6, agregacao_regional = 6

    @pytest.mark.parametrize('ano, cargo, agregacao_regional',
                             [(a,b,c) for a in range(2006,2022,4) for b in [1,3,5,6] for c in [6]])
    
    def test_cepespdata(ano, cargo, agregacao_regional):
        inst = teste_cepespdata(ano, cargo, agregacao_regional = agregacao_regional, test = False)
        inst.call_teste_geral()
    
        #o assert é usado para fazer o teste de fato. Se der false, ele já coloca no log
        #o log para sempre no primeiro erro
    
        #######################################################
        # 1. Número de Eleitos
>       assert inst.qtde_eleitos == inst.qtde_vagas_disponiveis
E       assert 434 == 513
E        +  where 434 = <teste_cepespdata.teste_cepespdata object at 0x7fc04e8f9780>.qtde_eleitos
E        +  and   513 = <teste_cepespdata.teste_cepespdata object at 0x7fc04e8f9780>.qtde_vagas_disponiveis

test.py:18: AssertionError
------------------------------------------------------ Captured stdout call ------------------------------------------------------
Ano: 2006
Cargo: 6 
Banco Teste: False

Starting test...
Downloading Eleições - BETA...
Downloading Candidatos...
___________________________________________________ test_cepespdata[2010-1-6] ____________________________________________________

ano = 2010, cargo = 1, agregacao_regional = 6

    @pytest.mark.parametrize('ano, cargo, agregacao_regional',
                             [(a,b,c) for a in range(2006,2022,4) for b in [1,3,5,6] for c in [6]])
    
    def test_cepespdata(ano, cargo, agregacao_regional):
        inst = teste_cepespdata(ano, cargo, agregacao_regional = agregacao_regional, test = False)
        inst.call_teste_geral()
    
        #o assert é usado para fazer o teste de fato. Se der false, ele já coloca no log
        #o log para sempre no primeiro erro
    
        #######################################################
        # 1. Número de Eleitos
        assert inst.qtde_eleitos == inst.qtde_vagas_disponiveis
    
        #######################################################
        # 2. Quantidade de UF
        # Fonte: Detalhe seção do TSE
    
        if agregacao_regional >= 2:
>           assert inst.qtde_ufs == 27
E           assert 28 == 27
E            +  where 28 = <teste_cepespdata.teste_cepespdata object at 0x7fc030014278>.qtde_ufs

test.py:25: AssertionError
------------------------------------------------------ Captured stdout call ------------------------------------------------------
Ano: 2010
Cargo: 1 
Banco Teste: False

Starting test...
Downloading Eleições - BETA...
Downloading Candidatos...
___________________________________________________ test_cepespdata[2010-3-6] ____________________________________________________

ano = 2010, cargo = 3, agregacao_regional = 6

    @pytest.mark.parametrize('ano, cargo, agregacao_regional',
                             [(a,b,c) for a in range(2006,2022,4) for b in [1,3,5,6] for c in [6]])
    
    def test_cepespdata(ano, cargo, agregacao_regional):
        inst = teste_cepespdata(ano, cargo, agregacao_regional = agregacao_regional, test = False)
        inst.call_teste_geral()
    
        #o assert é usado para fazer o teste de fato. Se der false, ele já coloca no log
        #o log para sempre no primeiro erro
    
        #######################################################
        # 1. Número de Eleitos
        assert inst.qtde_eleitos == inst.qtde_vagas_disponiveis
    
        #######################################################
        # 2. Quantidade de UF
        # Fonte: Detalhe seção do TSE
    
        if agregacao_regional >= 2:
            assert inst.qtde_ufs == 27
    
        #######################################################
        # 3. Quantidade total de votos frente ao comparecimento com 1% de tolerância
        # Fonte: Detalhe seção do TSE
>       assert math.isclose(inst.qtde_votos_total_1turno, inst.qtde_comparecimento_1turno, rel_tol=0.01)
E       assert False
E        +  where False = <built-in function isclose>(143527669, 111037520, rel_tol=0.01)
E        +    where <built-in function isclose> = math.isclose
E        +    and   143527669 = <teste_cepespdata.teste_cepespdata object at 0x7fc04dede438>.qtde_votos_total_1turno
E        +    and   111037520 = <teste_cepespdata.teste_cepespdata object at 0x7fc04dede438>.qtde_comparecimento_1turno

test.py:30: AssertionError
------------------------------------------------------ Captured stdout call ------------------------------------------------------
Ano: 2010
Cargo: 3 
Banco Teste: False

Starting test...
Downloading Eleições - BETA...
Downloading Candidatos...
___________________________________________________ test_cepespdata[2010-6-6] ____________________________________________________

ano = 2010, cargo = 6, agregacao_regional = 6

    @pytest.mark.parametrize('ano, cargo, agregacao_regional',
                             [(a,b,c) for a in range(2006,2022,4) for b in [1,3,5,6] for c in [6]])
    
    def test_cepespdata(ano, cargo, agregacao_regional):
        inst = teste_cepespdata(ano, cargo, agregacao_regional = agregacao_regional, test = False)
        inst.call_teste_geral()
    
        #o assert é usado para fazer o teste de fato. Se der false, ele já coloca no log
        #o log para sempre no primeiro erro
    
        #######################################################
        # 1. Número de Eleitos
>       assert inst.qtde_eleitos == inst.qtde_vagas_disponiveis
E       assert 446 == 513
E        +  where 446 = <teste_cepespdata.teste_cepespdata object at 0x7fc04daede48>.qtde_eleitos
E        +  and   513 = <teste_cepespdata.teste_cepespdata object at 0x7fc04daede48>.qtde_vagas_disponiveis

test.py:18: AssertionError
------------------------------------------------------ Captured stdout call ------------------------------------------------------
Ano: 2010
Cargo: 6 
Banco Teste: False

Starting test...
Downloading Eleições - BETA...
Downloading Candidatos...
___________________________________________________ test_cepespdata[2014-1-6] ____________________________________________________

ano = 2014, cargo = 1, agregacao_regional = 6

    @pytest.mark.parametrize('ano, cargo, agregacao_regional',
                             [(a,b,c) for a in range(2006,2022,4) for b in [1,3,5,6] for c in [6]])
    
    def test_cepespdata(ano, cargo, agregacao_regional):
        inst = teste_cepespdata(ano, cargo, agregacao_regional = agregacao_regional, test = False)
        inst.call_teste_geral()
    
        #o assert é usado para fazer o teste de fato. Se der false, ele já coloca no log
        #o log para sempre no primeiro erro
    
        #######################################################
        # 1. Número de Eleitos
        assert inst.qtde_eleitos == inst.qtde_vagas_disponiveis
    
        #######################################################
        # 2. Quantidade de UF
        # Fonte: Detalhe seção do TSE
    
        if agregacao_regional >= 2:
>           assert inst.qtde_ufs == 27
E           assert 28 == 27
E            +  where 28 = <teste_cepespdata.teste_cepespdata object at 0x7fc04b4961d0>.qtde_ufs

test.py:25: AssertionError
------------------------------------------------------ Captured stdout call ------------------------------------------------------
Ano: 2014
Cargo: 1 
Banco Teste: False

Starting test...
Downloading Eleições - BETA...
Downloading Candidatos...
___________________________________________________ test_cepespdata[2014-3-6] ____________________________________________________

ano = 2014, cargo = 3, agregacao_regional = 6

    @pytest.mark.parametrize('ano, cargo, agregacao_regional',
                             [(a,b,c) for a in range(2006,2022,4) for b in [1,3,5,6] for c in [6]])
    
    def test_cepespdata(ano, cargo, agregacao_regional):
        inst = teste_cepespdata(ano, cargo, agregacao_regional = agregacao_regional, test = False)
        inst.call_teste_geral()
    
        #o assert é usado para fazer o teste de fato. Se der false, ele já coloca no log
        #o log para sempre no primeiro erro
    
        #######################################################
        # 1. Número de Eleitos
>       assert inst.qtde_eleitos == inst.qtde_vagas_disponiveis
E       assert 28 == 27
E        +  where 28 = <teste_cepespdata.teste_cepespdata object at 0x7fc042db2390>.qtde_eleitos
E        +  and   27 = <teste_cepespdata.teste_cepespdata object at 0x7fc042db2390>.qtde_vagas_disponiveis

test.py:18: AssertionError
------------------------------------------------------ Captured stdout call ------------------------------------------------------
Ano: 2014
Cargo: 3 
Banco Teste: False

Starting test...
Downloading Eleições - BETA...
Downloading Candidatos...
___________________________________________________ test_cepespdata[2018-1-6] ____________________________________________________

ano = 2018, cargo = 1, agregacao_regional = 6

    @pytest.mark.parametrize('ano, cargo, agregacao_regional',
                             [(a,b,c) for a in range(2006,2022,4) for b in [1,3,5,6] for c in [6]])
    
    def test_cepespdata(ano, cargo, agregacao_regional):
        inst = teste_cepespdata(ano, cargo, agregacao_regional = agregacao_regional, test = False)
        inst.call_teste_geral()
    
        #o assert é usado para fazer o teste de fato. Se der false, ele já coloca no log
        #o log para sempre no primeiro erro
    
        #######################################################
        # 1. Número de Eleitos
        assert inst.qtde_eleitos == inst.qtde_vagas_disponiveis
    
        #######################################################
        # 2. Quantidade de UF
        # Fonte: Detalhe seção do TSE
    
        if agregacao_regional >= 2:
>           assert inst.qtde_ufs == 27
E           assert 28 == 27
E            +  where 28 = <teste_cepespdata.teste_cepespdata object at 0x7fc042a85400>.qtde_ufs

test.py:25: AssertionError
------------------------------------------------------ Captured stdout call ------------------------------------------------------
Ano: 2018
Cargo: 1 
Banco Teste: False

Starting test...
Downloading Eleições - BETA...
Downloading Candidatos...
___________________________________________________ test_cepespdata[2018-3-6] ____________________________________________________

ano = 2018, cargo = 3, agregacao_regional = 6

    @pytest.mark.parametrize('ano, cargo, agregacao_regional',
                             [(a,b,c) for a in range(2006,2022,4) for b in [1,3,5,6] for c in [6]])
    
    def test_cepespdata(ano, cargo, agregacao_regional):
        inst = teste_cepespdata(ano, cargo, agregacao_regional = agregacao_regional, test = False)
        inst.call_teste_geral()
    
        #o assert é usado para fazer o teste de fato. Se der false, ele já coloca no log
        #o log para sempre no primeiro erro
    
        #######################################################
        # 1. Número de Eleitos
        assert inst.qtde_eleitos == inst.qtde_vagas_disponiveis
    
        #######################################################
        # 2. Quantidade de UF
        # Fonte: Detalhe seção do TSE
    
        if agregacao_regional >= 2:
>           assert inst.qtde_ufs == 27
E           assert 26 == 27
E            +  where 26 = <teste_cepespdata.teste_cepespdata object at 0x7fc041a80da0>.qtde_ufs

test.py:25: AssertionError
------------------------------------------------------ Captured stdout call ------------------------------------------------------
Ano: 2018
Cargo: 3 
Banco Teste: False

Starting test...
Downloading Eleições - BETA...
Downloading Candidatos...
___________________________________________________ test_cepespdata[2018-5-6] ____________________________________________________

ano = 2018, cargo = 5, agregacao_regional = 6

    @pytest.mark.parametrize('ano, cargo, agregacao_regional',
                             [(a,b,c) for a in range(2006,2022,4) for b in [1,3,5,6] for c in [6]])
    
    def test_cepespdata(ano, cargo, agregacao_regional):
        inst = teste_cepespdata(ano, cargo, agregacao_regional = agregacao_regional, test = False)
        inst.call_teste_geral()
    
        #o assert é usado para fazer o teste de fato. Se der false, ele já coloca no log
        #o log para sempre no primeiro erro
    
        #######################################################
        # 1. Número de Eleitos
        assert inst.qtde_eleitos == inst.qtde_vagas_disponiveis
    
        #######################################################
        # 2. Quantidade de UF
        # Fonte: Detalhe seção do TSE
    
        if agregacao_regional >= 2:
>           assert inst.qtde_ufs == 27
E           assert 26 == 27
E            +  where 26 = <teste_cepespdata.teste_cepespdata object at 0x7fc042686a58>.qtde_ufs

test.py:25: AssertionError
------------------------------------------------------ Captured stdout call ------------------------------------------------------
Ano: 2018
Cargo: 5 
Banco Teste: False

Starting test...
Downloading Eleições - BETA...
Downloading Candidatos...
___________________________________________________ test_cepespdata[2018-6-6] ____________________________________________________

ano = 2018, cargo = 6, agregacao_regional = 6

    @pytest.mark.parametrize('ano, cargo, agregacao_regional',
                             [(a,b,c) for a in range(2006,2022,4) for b in [1,3,5,6] for c in [6]])
    
    def test_cepespdata(ano, cargo, agregacao_regional):
        inst = teste_cepespdata(ano, cargo, agregacao_regional = agregacao_regional, test = False)
        inst.call_teste_geral()
    
        #o assert é usado para fazer o teste de fato. Se der false, ele já coloca no log
        #o log para sempre no primeiro erro
    
        #######################################################
        # 1. Número de Eleitos
        assert inst.qtde_eleitos == inst.qtde_vagas_disponiveis
    
        #######################################################
        # 2. Quantidade de UF
        # Fonte: Detalhe seção do TSE
    
        if agregacao_regional >= 2:
>           assert inst.qtde_ufs == 27
E           assert 26 == 27
E            +  where 26 = <teste_cepespdata.teste_cepespdata object at 0x7fc04194ef98>.qtde_ufs

test.py:25: AssertionError
------------------------------------------------------ Captured stdout call ------------------------------------------------------
Ano: 2018
Cargo: 6 
Banco Teste: False

Starting test...
Downloading Eleições - BETA...
Downloading Candidatos...
======================================= 12 failed, 4 passed, 6 warnings in 1523.53 seconds =======================================
